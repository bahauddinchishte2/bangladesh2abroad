---
interface Props {
  title: string;
  url?: string;
}

const { title, url } = Astro.props;
---

<div class="social-share">
  <h4 class="font-semibold mb-2">Share this post:</h4>
  <div class="flex gap-2">
    <a href="#" target="_blank" rel="noopener noreferrer" class="social-icon facebook-share">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path fill-rule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" clip-rule="evenodd" />
      </svg>
      <span class="sr-only">Facebook</span>
    </a>
    <a href="#" target="_blank" rel="noopener noreferrer" class="social-icon twitter-share">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
      </svg>
      <span class="sr-only">Twitter</span>
    </a>
    <a href="#" target="_blank" rel="noopener noreferrer" class="social-icon whatsapp-share">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51a12.8 12.8 0 00-.57-.01c-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.57-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z" />
      </svg>
      <span class="sr-only">WhatsApp</span>
    </a>
    <button class="social-icon copy-button" aria-label="Copy link to clipboard" id="copy-link-button">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M16 1H4c-1.103 0-2 .897-2 2v14h2V3h12V1zm3 4H8c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h11c1.103 0 2-.897 2-2V7c0-1.103-.897-2-2-2zm0 16H8V7h11v14z"/>
      </svg>
      <span class="sr-only">Copy Link</span>
    </button>
    <div id="tooltip" class="hidden absolute bg-black text-white px-2 py-1 rounded text-xs -mt-8 transform -translate-x-1/2">
      Copied!
    </div>
  </div>
</div>

<style>
.social-share {
  @apply mt-8 bg-white rounded-lg border border-gray-200 p-4 relative;
}

.social-icon {
  @apply text-gray-600 hover:text-primary-600 transition-colors inline-flex items-center justify-center p-2 rounded-full hover:bg-gray-100;
}

.social-icon svg {
  @apply h-5 w-5;
}

#tooltip {
  opacity: 0;
  transition: opacity 0.3s ease-in-out;
  pointer-events: none;
  z-index: 50;
}

#tooltip.visible {
  opacity: 1;
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Get the current URL and title
    const currentUrl = window.location.href;
    const pageTitle = document.title;

    // Set up sharing URLs
    const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentUrl)}`;
    const twitterUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(currentUrl)}&text=${encodeURIComponent(pageTitle)}`;
    const whatsappUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(pageTitle + " " + currentUrl)}`;

    // Set the correct URLs for the sharing buttons
    document.querySelectorAll('.facebook-share').forEach(link => {
      link.setAttribute('href', facebookUrl);
    });

    document.querySelectorAll('.twitter-share').forEach(link => {
      link.setAttribute('href', twitterUrl);
    });

    document.querySelectorAll('.whatsapp-share').forEach(link => {
      link.setAttribute('href', whatsappUrl);
    });

    // Handle copy link functionality
    const copyButtons = document.querySelectorAll('.copy-button');
    const tooltip = document.getElementById('tooltip');

    copyButtons.forEach(button => {
      button.addEventListener('click', function() {
        copyToClipboard(currentUrl, button);
      });
    });

    // Fallback copy function for different browser support scenarios
    function copyToClipboard(text, button) {
      // Get button position for tooltip placement
      const rect = button.getBoundingClientRect();
      const buttonX = rect.left + rect.width / 2;
      const buttonTop = rect.top;
      
      // Position tooltip
      if (tooltip) {
        tooltip.style.left = `${buttonX}px`;
        tooltip.style.top = `${buttonTop - 10}px`;
      }

      // Primary method: Use Clipboard API if available
      if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(text)
          .then(() => showSuccess(button))
          .catch(() => {
            // If Clipboard API fails, try the fallback method
            fallbackCopyMethod(text, button);
          });
      } else {
        // Fallback for non-secure contexts or older browsers
        fallbackCopyMethod(text, button);
      }
    }

    // Fallback copy method using textarea
    function fallbackCopyMethod(text, button) {
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed'; // Avoid scrolling to bottom
      textArea.style.opacity = '0';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();

      try {
        // Execute the copy command
        const successful = document.execCommand('copy');
        if (successful) {
          showSuccess(button);
        } else {
          showError(button);
        }
      } catch (err) {
        console.error('Fallback copy method failed:', err);
        showError(button);
      }

      document.body.removeChild(textArea);
    }

    // Show success state
    function showSuccess(button) {
      const originalIcon = button.innerHTML;
      
      // Show the tooltip
      if (tooltip) {
        tooltip.textContent = 'Copied!';
        tooltip.classList.remove('hidden');
        tooltip.classList.add('visible');
      }
      
      // Change button icon to checkmark
      button.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="text-green-600">
          <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"/>
        </svg>
        <span class="sr-only">Copied!</span>
      `;
      
      // Reset after delay
      setTimeout(() => {
        button.innerHTML = originalIcon;
        if (tooltip) {
          tooltip.classList.remove('visible');
          tooltip.classList.add('hidden');
        }
      }, 2000);
    }

    // Show error state
    function showError(button) {
      console.error('Failed to copy text');
      
      // Show error tooltip
      if (tooltip) {
        tooltip.textContent = 'Failed to copy';
        tooltip.classList.remove('hidden');
        tooltip.classList.add('visible');
      }
      
      // Reset after delay
      setTimeout(() => {
        if (tooltip) {
          tooltip.classList.remove('visible');
          tooltip.classList.add('hidden');
        }
      }, 2000);
    }
  });
</script>