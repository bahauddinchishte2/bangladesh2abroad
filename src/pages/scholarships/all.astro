---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { format } from 'date-fns';
import TopSearchBar from '../../components/TopSearchBar.astro';
import FilterSystem from '../../components/FilterSystem.astro';
import OpportunityCard from '../../components/OpportunityCard.astro';

// Get all scholarships
const allScholarships = await getCollection('scholarships');
const today = new Date();

// Get all possible unique values for filters
const countries = [...new Set(allScholarships.map(post => post.data.country))];
const levels = [...new Set(allScholarships.map(post => post.data.levelOfStudy))];
const fundingTypes = [...new Set(allScholarships.map(post => post.data.fundingType))];

// Prepare scholarships data for search
const scholarshipsData = allScholarships.map(post => ({
  title: post.data.title,
  country: post.data.country,
  fundingType: post.data.fundingType,
  levelOfStudy: post.data.levelOfStudy,
  category: post.data.category,
  tags: post.data.tags,
  slug: post.slug
}));
---

<Layout 
  title="All Scholarships"
  description="Browse all government and university scholarships for Bangladeshi students to study abroad."
  keywords={["scholarships", "study abroad", "international scholarships", "funding opportunities", "education"]}
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-6">All Scholarships</h1>
    
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- Filters -->
      <aside class="lg:col-span-1 h-fit sticky top-24">
        <div class="lg:hidden mb-4">
          <button id="mobile-filters-toggle" class="w-full bg-white p-4 rounded-lg shadow-md flex justify-between items-center border border-gray-200">
            <span class="font-medium">Show Filters</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
        </div>
        
        <div id="mobile-filters" class="hidden lg:block">
          <FilterSystem 
            filters={{
              countries,
              fundingTypes,
              levels
            }}
          />
        </div>
      </aside>

      <!-- Scholarship List -->
      <div class="lg:col-span-3">
        <!-- Search bar added inside content column -->
        <div class="mb-6">
          <TopSearchBar />
        </div>
        
        {allScholarships.length > 0 ? (
          <div class="space-y-4 sm:space-y-6">
            {allScholarships.map(post => (
              <div class="opportunity-card"
                data-country={post.data.country}
                data-level={post.data.levelOfStudy}
                data-fundingType={post.data.fundingType}
                data-tag={post.data.tags.join(',')}
                data-deadline={post.data.deadline}
                data-category={post.data.category}
                data-status={new Date(post.data.deadline) >= today ? 'open' : 'closed'}
              >
                <OpportunityCard 
                  item={{
                    title: post.data.title,
                    slug: post.slug,
                    hostInstitution: post.data.hostInstitution,
                    country: post.data.country,
                    fundingType: post.data.fundingType,
                    deadline: post.data.deadline,
                    category: post.data.category,
                    openDate: post.data.openDate
                  }}
                />
              </div>
            ))}
          </div>
        ) : (
          <div class="bg-white p-6 rounded-lg shadow-md text-center border border-gray-200">
            <p class="text-gray-600">No scholarships available at the moment.</p>
          </div>
        )}
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ scholarshipsData }}>
  // Make opportunities data available for search
  window.OPPORTUNITIES_DATA = scholarshipsData;

  // Mobile filters toggle
  document.addEventListener('DOMContentLoaded', function() {
    const mobileFiltersToggle = document.getElementById('mobile-filters-toggle');
    const mobileFilters = document.getElementById('mobile-filters');
    
    if (mobileFiltersToggle && mobileFilters) {
      mobileFiltersToggle.addEventListener('click', function() {
        mobileFilters.classList.toggle('hidden');
        
        // Update button text and icon
        if (mobileFilters.classList.contains('hidden')) {
          mobileFiltersToggle.innerHTML = `
            <span class="font-medium">Show Filters</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          `;
        } else {
          mobileFiltersToggle.innerHTML = `
            <span class="font-medium">Hide Filters</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
            </svg>
          `;
        }
      });
    }
  });

  // Filter function
  function updateResults() {
    const opportunities = document.querySelectorAll('.opportunity-card');
    const filters = {};
    
    // Get status filter
    const statusFilter = document.getElementById('status-filter')?.value || 'all';

    // Collect active filters
    document.querySelectorAll('select[data-filter]').forEach(select => {
      const filterType = select.getAttribute('data-filter');
      const value = select.value;
      
      if (filterType && value) {
        filters[filterType] = value;
      }
    });

    // Apply filters
    opportunities.forEach(card => {
      let shouldShow = true;

      // Apply status filter
      if (statusFilter !== 'all') {
        const cardStatus = card.getAttribute('data-status');
        if (cardStatus !== statusFilter) {
          shouldShow = false;
        }
      }

      // Check each other filter
      Object.entries(filters).forEach(([filterType, value]) => {
        if (filterType === 'deadline') {
          const deadlineStr = card.getAttribute('data-deadline');
          const deadline = deadlineStr ? new Date(deadlineStr) : null;
          const today = new Date();

          // Skip if no deadline found
          if (!deadline) {
            shouldShow = false;
            return;
          }

          if (value === 'open') {
            // Currently Open
            if (deadline < today) {
              shouldShow = false;
            }
          } else if (value === '1month') {
            // Within 1 Month
            const oneMonthFromNow = new Date();
            oneMonthFromNow.setMonth(today.getMonth() + 1);
            if (!(deadline >= today && deadline <= oneMonthFromNow)) {
              shouldShow = false;
            }
          } else if (value === '2months') {
            // Within 2 Months
            const twoMonthsFromNow = new Date();
            twoMonthsFromNow.setMonth(today.getMonth() + 2);
            if (!(deadline >= today && deadline <= twoMonthsFromNow)) {
              shouldShow = false;
            }
          } else if (value === '3months') {
            // Within 3 Months
            const threeMonthsFromNow = new Date();
            threeMonthsFromNow.setMonth(today.getMonth() + 3);
            if (!(deadline >= today && deadline <= threeMonthsFromNow)) {
              shouldShow = false;
            }
          } else if (value === '6months') {
            // Within 6 Months
            const sixMonthsFromNow = new Date();
            sixMonthsFromNow.setMonth(today.getMonth() + 6);
            if (!(deadline >= today && deadline <= sixMonthsFromNow)) {
              shouldShow = false;
            }
          } else if (value === '12months') {
            // Within 12 Months
            const oneYearFromNow = new Date();
            oneYearFromNow.setMonth(today.getMonth() + 12);
            if (!(deadline >= today && deadline <= oneYearFromNow)) {
              shouldShow = false;
            }
          }
        } else {
          const cardValue = card.getAttribute(`data-${filterType}`);
          if (!cardValue || !cardValue.includes(value)) {
            shouldShow = false;
          }
        }
      });

      card.style.display = shouldShow ? 'block' : 'none';
    });

    // Check if there are no visible results
    const visibleCards = Array.from(opportunities).filter(card => card.style.display !== 'none');
    const noResultsMessage = document.getElementById('no-results-message');
    
    if (noResultsMessage) {
      noResultsMessage.style.display = visibleCards.length === 0 ? 'block' : 'none';
    } else if (visibleCards.length === 0) {
      // Create no results message if it doesn't exist
      const messageDiv = document.createElement('div');
      messageDiv.id = 'no-results-message';
      messageDiv.className = 'bg-white p-6 rounded-lg shadow-md text-center border border-gray-200 mt-6';
      messageDiv.innerHTML = '<p class="text-gray-600">No scholarships match your filters. Try adjusting your criteria.</p>';
      
      const contentArea = document.querySelector('.lg\\:col-span-3');
      if (contentArea) {
        contentArea.appendChild(messageDiv);
      }
    }
  }

  // Add event listeners to all filter selects
  document.querySelectorAll('select[data-filter]').forEach(select => {
    select.addEventListener('change', updateResults);
  });

  // Add event listener to status filter
  document.getElementById('status-filter')?.addEventListener('change', updateResults);

  // Reset filters
  document.getElementById('reset-filters')?.addEventListener('click', () => {
    document.querySelectorAll('select[data-filter]').forEach(select => {
      select.value = '';
    });
    if (document.getElementById('status-filter')) {
      document.getElementById('status-filter').value = 'all';
    }
    updateResults();
  });

  // Initialize filters
  updateResults();
</script>